# -*- coding: utf-8 -*-
"""innovescence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bXcgQ_Lxj4gDbaRuNtssq1FrLb9g_Wam
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder

# Load the dataset
data = {
    'DATE': ['21/03/2024', '21/03/2024', '22/03/2024', '22/03/2024', '23/03/2024', '23/03/2024', '24/03/2024', '24/03/2024', '25/03/2024', '25/03/2024'],
    'DAY': ['THURSDAY', 'THURSDAY', 'FRIDAY', 'FRIDAY', 'SATURDAY', 'SATURDAY', 'SUNDAY', 'SUNDAY', 'MONDAY', 'MONDAY'],
    'SHIFT': ['MORNING', 'AFTERNOON', 'MORNING', 'AFTERNOON', 'MORNING', 'AFTERNOON', 'MORNING', 'AFTERNOON', 'MORNING', 'AFTERNOON'],
    'HOSPITAL': ['VELS', 'MMHRC', 'GANGA', 'KAUVERY', 'RIO', 'KMCH', 'SVS', 'GEMS', 'ARAVIND', 'YAMUNA'],
    'FILL_PERCENT': [85, 75, 72, 65, 50, 47, 45, 42, 32, 22]
}

df = pd.DataFrame(data)

# Sort the dataframe by fill percent in descending order
sorted_df = df.sort_values(by='FILL_PERCENT', ascending=False)

# Display the rescheduled time table
print("Rescheduled Time Table (Decreasing Order of Fill Percent):")
print(sorted_df)

# One-hot encode categorical variables
df_encoded = pd.get_dummies(sorted_df, columns=['DAY', 'SHIFT'])

# Create a dictionary to store regression models for each hospital
hospital_models = {}

# Iterate over each hospital
for hospital in df_encoded['HOSPITAL'].unique():
    # Filter data for the current hospital
    hospital_data = df_encoded[df_encoded['HOSPITAL'] == hospital]

    # If there's only one data point for the hospital, use it for training directly
    if len(hospital_data) == 1:
        X = hospital_data.drop(['FILL_PERCENT', 'DATE', 'HOSPITAL'], axis=1)
        y = hospital_data['FILL_PERCENT']
    else:
        # Separating features and target variable
        X = hospital_data.drop(['FILL_PERCENT', 'DATE', 'HOSPITAL'], axis=1)
        y = hospital_data['FILL_PERCENT']

    # Linear Regression model
    model = LinearRegression()

    # Training the model
    model.fit(X, y)

    # Store the trained model in the dictionary
    hospital_models[hospital] = model

# Predict fill percentages for each hospital
predictions = {}
for hospital, model in hospital_models.items():
    hospital_data = df_encoded[df_encoded['HOSPITAL'] == hospital]
    X_pred = hospital_data.drop(['FILL_PERCENT', 'DATE', 'HOSPITAL'], axis=1)
    predictions[hospital] = model.predict(X_pred)

# Print predictions for each hospital
print("\nPredictions for Each Hospital:")
for hospital, fill_predictions in predictions.items():
    print(f"Predictions for {hospital}: {fill_predictions}")